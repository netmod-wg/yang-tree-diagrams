# -*- org -*-

This document captures the current syntax used in YANG module Tree
Diagrams.  The purpose of the document is to provide a single location
for this definition.  This syntax may be updated from time to time
based on the evolution of the YANG language.

* Introduction

YANG Tree Diagrams were first published in ^RFC7223^.  Such diagrams
are commonly used to provided a simplified graphical representation of
a data model and can be automatically generated via tools such as
"pyang".  (See <https://github.com/mbj4668/pyang>).  This document
provides the syntax used in YANG Tree Diagrams.  It is expected that
this document will be updated or replaced as changes to the YANG
language, see ^RFC7950^, necessitate.

Today's Common practice is include the definition of the syntax used
to represent a YANG module in every document that provides a tree
diagram.  This practice has several disadvantages and the purpose of
the document is to provide a single location for this definition.  It
is not the intent of this document to restrict future changes, but
rather to ensure such changes are easily identified and suitably
agreed upon.

An example tree diagram can be found in ^RFC7223^ Section 3.  A
portion of which follows:

  +--rw interfaces
  |  +--rw interface* [name]
  |     +--rw name                        string
  |     +--rw description?                string
  |     +--rw type                        identityref
  |     +--rw enabled?                    boolean
  |     +--rw link-up-down-trap-enable?   enumeration

The remainder of this document contains YANG Tree Diagram syntax
based on output from pyang version 1.7.1.

* Tree Diagram Syntax

This section provides the meaning of the symbols used in YANG Tree
diagrams.

Each node in a YANG module is printed as:

<status> <flags> <name> <opts> <type> <if-features>

  <status> is one of:
    +  for current
    x  for deprecated
    o  for obsolete

  <flags> is one of:
    rw  for configuration data
    ro  for non-configuration data
    -x  for rpcs and actions
    -n  for notifications
    M   for schema mount points

  <name> is the name of the node
    (<name>) means that the node is a choice node
   :(<name>) means that the node is a case node

   If the node is augmented into the tree from another module, its
   name is printed as <prefix>:<name>.

  <opts> is one of:
    ?  for an optional leaf, choice, anydata or anyxml
    !  for a presence container
    *  for a leaf-list or list
    [<keys>] for a list's keys
    @  for a schema mount point

  <type> is the name of the type for leafs and leaf-lists

    If the type is a leafref, the type is printed as "-> TARGET",
    where TARGET is either the leafref path, with prefixed removed
    if possible.

  <if-features> is the list of features this node depends on,
  printed within curly brackets and a question mark "{...}?"

* Usage Guidelines For RFCs

This section provides general guidelines related to the use of tree
diagrams in RFCs.  This section covers [Authors' note: will cover]
different types of trees and when to use them; for example, complete
module trees, subtrees, trees for groupings etc.

** Wrapping Long Lines

Internet Drafts and RFCs limit the number of characters that may in a
line of text to 72 characters.  When the tree representation of a node
results in line being longer than this limit the line should be broken
between <opts> and <type>.  The type should be indented so that the new
line starts below <name> with a white space offset of at least two
characters. For example:

  notifications:
    +---n yang-library-change
       +--ro module-set-id
               -> /modules-state/module-set-id

The previously 'pyang' command can be helpful in producing such output,
for example the above example was produced using:

  pyang -f tree --tree-line-length 50 < ietf-yang-library.yang

* YANG Schema Mount Tree Diagrams

YANG Schema Mount is defined in ^I-D.ietf-netmod-schema-mount^ and
warrants some specific discussion. Schema mount document is a generic
mechanism that allows for mounting one data model consisting of any
number of YANG modules at a specified location of another (parent)
schema.  Modules containing mount points will identify mount points by
name using the mount-point extension. These mount-points should be
identified, as indicated above using the 'M' flag and '@' option.  For
example:

    module: ietf-logical-network-element
        +--rw logical-network-elements
           +--rw logical-network-element* [name]
              +--rw name           string
              +--rw managed?       boolean
              +--rw description?   string
              +--M  root@          yangmnt:mount-point

Note that a mount point definition alone is not sufficient to identify
if a mount point configuration or for non-configuration data.  This is
determined by the yang-schema-mount module 'config' leaf associated with
the specific mount point.

In describing the intended use of a module containing a mount point, it
is helpful to show how the mount point would look with mounted modules.
In such cases, the mount point should be treated much like a container
that uses a grouping.  The flags should also be set based on the
'config' leaf mentioned above.  For example, the following represents
the prior example with YANG Library and Interfaces modules mounted and
'config' indicating true:

    module: ietf-logical-network-element
        +--rw logical-network-elements
           +--rw logical-network-element* [name]
              +--rw name           string
              +--rw managed?       boolean
              +--rw description?   string
              +--M  root@          yangmnt:mount-point
                 +--rw ietf-yang-library
                 |  +--ro modules-state
                 |     +-- ...
                 +--rw ietf-interfaces
                    +--rw interfaces
                    |  +-- ...
                    +--ro interfaces-state
                       +-- ...

The following represents the same schema, but with  'config' indicating
false:

    module: ietf-logical-network-element
        +--rw logical-network-elements
           +--rw logical-network-element* [name]
              +--rw name           string
              +--rw managed?       boolean
              +--rw description?   string
              +--M  root@          yangmnt:mount-point
                 +--ro ietf-yang-library
                 |  +--ro modules-state
                 |     +-- ...
                 +--ro ietf-interfaces
                    +--ro interfaces
                    |  +-- ...
                    +--ro interfaces-state
                       +-- ...

* IANA Considerations

There are no IANA requests or assignments included in this document.



{{document:
    name ;
    ipr trust200902;
    category std;
    references references.xml;
    title "YANG Tree Diagrams";
    abbreviation "YANG Tree Diagrams";
    contributor "author:Martin Bjorklund:Tail-f Systems:mbj@tail-f.com";
    contributor "editor:Lou Berger:LabN Consulting, L.L.C.:lberger@labn.net";
}}
